---
description: 
globs: 
alwaysApply: true
---
---
title: Java & Vue 3 编码规范
description: 项目编码规范文档，包含 Java 和 Vue 3 的详细编码标准
author: 董康
version: 1.0.0
last_updated: 2024-03-21
tags:
  - java
  - vue3
  - coding-standards
  - best-practices
  - ant-design-vue
---

# Java & Vue 3 编码规范

## Java 编码规范

### 1. 命名规范

- 类名：使用 PascalCase，如 `UserService`
- 方法名：使用 camelCase，如 `getUserById`
- 变量名：使用 camelCase，如 `userName`
- 常量名：使用全大写下划线分隔，如 `MAX_COUNT`
- 包名：全小写，如 `com.example.project`

### 2. 代码格式

- 缩进使用 4 个空格
- 每行代码不超过 120 个字符
- 方法之间空一行
- 相关的变量声明放在一起
- 运算符前后要有空格

### 3. 注释规范

- 类注释：使用 Javadoc 格式
- 方法注释：说明参数、返回值、异常
- 关键代码注释：解释复杂逻辑
- 避免无意义的注释

### 4. 异常处理

- 不要捕获 Exception 等通用异常
- 优先使用具体的异常类型
- 异常信息要具体明确
- 合理使用 try-with-resources

### 5. 代码质量

- 遵循 SOLID 原则
- 使用设计模式解决复杂问题
- 保持方法单一职责
- 避免代码重复
- 合理使用设计模式

## Vue 3 编码规范

### 1. 组件命名

- 组件名：使用 PascalCase，如 `UserProfile`
- 文件名：与组件名保持一致
- 基础组件：以 Base 开头，如 `BaseButton`
- 单例组件：以 The 开头，如 `TheHeader`

### 2. 模板规范

- 使用 kebab-case 命名自定义组件
- 使用 v-bind 简写 `:`
- 使用 v-on 简写 `@`
- 使用 v-slot 简写 `#`
- 属性值使用双引号

### 3. 脚本规范

- 使用 `<script setup>` 语法
- 使用 TypeScript
- 使用 Composition API
- 响应式数据使用 ref 或 reactive
- 计算属性使用 computed
- 方法使用 function 声明

### 4. 样式规范

- 使用 scoped 样式
- 使用 BEM 命名规范
- 优先使用 class 而不是 style
- 使用 CSS 变量管理主题
- 使用 SCSS/LESS 预处理器

### 5. 性能优化

- 合理使用 v-show 和 v-if
- 使用 v-once 处理静态内容
- 使用 keep-alive 缓存组件
- 使用异步组件
- 合理使用 computed 和 watch

### 6. 状态管理

- 使用 Pinia 进行状态管理
- 按模块划分 store
- 使用 actions 处理异步操作
- 使用 getters 处理派生状态
- 合理使用 storeToRefs

### 7. 路由规范

- 使用命名路由
- 路由配置集中管理
- 使用路由守卫处理权限
- 合理使用路由元信息
- 使用路由懒加载

### 8. API 调用

- 使用 axios 进行 HTTP 请求
- 统一管理 API 请求
- 使用拦截器处理请求/响应
- 合理使用请求缓存
- 统一错误处理

### 9. 工具函数

- 使用工具库（如 lodash）
- 编写可复用的工具函数
- 使用 TypeScript 类型
- 添加适当的注释
- 编写单元测试

### 10. 项目结构

```
src/
├── assets/        # 静态资源
├── components/    # 公共组件
├── composables/   # 组合式函数
├── router/        # 路由配置
├── stores/        # 状态管理
├── types/         # TypeScript 类型
├── utils/         # 工具函数
└── views/         # 页面组件
```

### 11. Ant Design Vue 规范

#### 11.1 版本与安装

- 使用 Ant Design Vue 4.x 最新版本
- 安装命令：
  ```bash
  # 使用 npm
  npm install ant-design-vue@latest
  
  # 使用 yarn
  yarn add ant-design-vue@latest
  
  # 使用 pnpm
  pnpm add ant-design-vue@latest
  ```

#### 11.2 组件使用规范

- 组件引入方式：
  ```typescript
  // 推荐：按需引入
  import { Button, Table } from 'ant-design-vue';
  import 'ant-design-vue/dist/reset.css';  // 使用新的 CSS 重置文件
  ```

#### 11.3 布局规范

- 使用 `a-layout` 作为页面基础布局
- 使用 `a-row` 和 `a-col` 进行栅格布局
- 响应式布局断点：
  ```typescript
  xs: <576px
  sm: ≥576px
  md: ≥768px
  lg: ≥992px
  xl: ≥1200px
  xxl: ≥1600px
  ```

#### 11.4 表单规范

- 使用 `a-form` 组件进行表单开发
- 使用 `v-model` 替代 `v-model:value`
- 表单验证规则统一管理
- 示例：
  ```vue
  <template>
    <a-form
      :model="formState"
      :rules="rules"
      :label-col="{ span: 6 }"
      :wrapper-col="{ span: 18 }"
    >
      <a-form-item label="用户名" name="username">
        <a-input v-model="formState.username" />
      </a-form-item>
    </a-form>
  </template>

  <script setup lang="ts">
  import { reactive } from 'vue';
  import type { Rule } from 'ant-design-vue/es/form';

  const formState = reactive({
    username: '',
  });

  const rules: Record<string, Rule[]> = {
    username: [
      { required: true, message: '请输入用户名' },
      { min: 3, max: 20, message: '长度在 3 到 20 个字符' },
    ],
  };
  </script>
  ```

#### 11.5 表格规范

- 使用 `a-table` 组件进行表格开发
- 使用 `v-model:selectedRowKeys` 替代 `selectedRowKeys.sync`
- 示例：
  ```vue
  <template>
    <a-table
      :columns="columns"
      :data-source="dataSource"
      :pagination="pagination"
      v-model:selectedRowKeys="selectedRowKeys"
    />
  </template>

  <script setup lang="ts">
  import { ref } from 'vue';
  import type { TableColumnsType } from 'ant-design-vue';

  const columns: TableColumnsType = [
    {
      title: '姓名',
      dataIndex: 'name',
      key: 'name',
      width: 200,
      fixed: 'left'
    },
    {
      title: '操作',
      key: 'action',
      width: 120,
      fixed: 'right'
    }
  ];

  const selectedRowKeys = ref<string[]>([]);
  </script>
  ```

#### 11.6 主题定制

- 使用 CSS 变量进行主题定制
- 在 `src/styles/theme.less` 中统一定义主题变量
- 示例：
  ```less
  :root {
    --ant-primary-color: #1890ff;
    --ant-success-color: #52c41a;
    --ant-warning-color: #faad14;
    --ant-error-color: #f5222d;
  }
  ```

#### 11.7 组件封装规范

- 基于 Ant Design Vue 组件进行二次封装
- 使用 `defineProps` 和 `defineEmits` 进行类型定义
- 示例：
  ```vue
  <!-- src/components/business/ATable.vue -->
  <template>
    <a-table
      v-bind="$attrs"
      :columns="columns"
      :data-source="dataSource"
      :pagination="pagination"
      @change="handleTableChange"
    />
  </template>

  <script setup lang="ts">
  import type { TableProps } from 'ant-design-vue';

  interface Props {
    columns: TableProps['columns'];
    dataSource: any[];
    pagination?: TableProps['pagination'];
  }

  const props = defineProps<Props>();
  const emit = defineEmits<{
    (e: 'change', pagination: any, filters: any, sorter: any): void;
  }>();

  const handleTableChange = (pagination: any, filters: any, sorter: any) => {
    emit('change', pagination, filters, sorter);
  };
  </script>
  ```

#### 11.8 图标使用规范

- 使用 Ant Design Vue 4.x 的新图标系统
- 引入方式：
  ```typescript
  import { 
    UserOutlined,
    SettingOutlined 
  } from '@ant-design/icons-vue';
  ```

#### 11.9 国际化规范

- 使用 Ant Design Vue 4.x 的国际化方案
- 配置示例：
  ```typescript
  import { createApp } from 'vue';
  import { ConfigProvider } from 'ant-design-vue';
  import zhCN from 'ant-design-vue/es/locale/zh_CN';
  import dayjs from 'dayjs';
  import 'dayjs/locale/zh-cn';
  
  dayjs.locale('zh-cn');
  
  const app = createApp(App);
  app.use(ConfigProvider, {
    locale: zhCN
  });
  ```

#### 11.10 性能优化

- 使用 `v-model` 替代 `.sync` 修饰符
- 使用 `v-show` 和 `v-if` 的合理组合
- 大数据列表使用虚拟滚动
- 示例：
  ```vue
  <a-table
    :scroll="{ y: 240 }"
    :virtual="true"
    :row-height="54"
  />
  ```

#### 11.11 常用组件配置

- 消息提示：
  ```typescript
  import { message } from 'ant-design-vue';
  message.success('操作成功');
  message.error('操作失败');
  ```

- 确认对话框：
  ```typescript
  import { Modal } from 'ant-design-vue';
  Modal.confirm({
    title: '确认删除',
    content: '确定要删除这条记录吗？',
    onOk() {
      // 确认操作
    }
  });
  ```

- 加载状态：
  ```typescript
  import { Spin } from 'ant-design-vue';
  <a-spin :spinning="loading" />
  ```

#### 11.12 TypeScript 支持

- 使用 Ant Design Vue 4.x 的完整 TypeScript 类型支持
- 组件 Props 类型定义：
  ```typescript
  import type { TableProps } from 'ant-design-vue';
  import type { FormInstance } from 'ant-design-vue';
  ```

#### 11.13 新特性使用

- 使用 `a-space` 组件进行间距控制
- 使用 `a-typography` 组件进行文本排版
- 使用 `a-flex` 组件进行弹性布局
- 示例：
  ```vue
  <template>
    <a-space direction="vertical" size="large">
      <a-typography-title>标题</a-typography-title>
      <a-flex gap="middle">
        <a-button type="primary">按钮1</a-button>
        <a-button>按钮2</a-button>
      </a-flex>
    </a-space>
  </template>
  ```

## 通用规范

### 1. 版本控制

- 使用语义化版本号
- 编写清晰的提交信息
- 遵循 Git Flow 工作流
- 及时处理冲突
- 保护主分支

### 2. 文档规范

- 及时更新文档
- 使用 Markdown 格式
- 包含必要的示例
- 说明使用场景
- 记录重要决策

### 3. 测试规范

- 编写单元测试
- 使用测试驱动开发
- 保持测试覆盖率
- 测试用例命名清晰
- 模拟外部依赖

### 4. 安全规范

- 防止 XSS 攻击
- 防止 CSRF 攻击
- 敏感数据加密
- 使用 HTTPS
- 定期更新依赖
